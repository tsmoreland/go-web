openapi: 3.0.0
info:
  version: 1.0.0
  title: readingList
  description: ''

servers:
  - url: http://localhost:9000/api
    description: Developer Server
  
tags:
  - name: books
    description: book CRUD operations
paths: 
  /books:
    post:
      operationId: addBook
      tags:
        - books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addOrUpdateBook'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
          links:
            GetBookById: 
              operationId: getBook
              parameters:
                id: '$response.body/#id'
            UpdateBook: 
              operationId: updateBook
              parameters:
                id: '$response.body/#id'         
            DeleteBook: 
              operationId: deleteBook
              parameters:
                id: '$response.body/#id'                   
        '400':
          description: Invalid Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problemDetails'        
    get:
      operationId: getAllBooks
      tags:
        - books
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  books: 
                    type: array
                    items:
                      $ref: '#/components/schemas/book'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problemDetails'      
  /books/{id}:
    get:
      operationId: getBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookEnvelope'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problemDetails'
    put:
      operationId: updateBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addOrUpdateBook'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookEnvelope'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problemDetails'      
    delete:
      operationId: deleteBook
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: OK
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/problemDetails'         
components:
  schemas:
    book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        published:
          type: integer
        pages:
          type: integer
        rating:
          type: number
          format: float
        genres:
          type: array
          items:
            type: string
    bookEnvelope:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/book'
    addOrUpdateBook:
      type: object
      properties:
        title:
          type: string
        published:
          type: integer
        pages:
          type: integer
        rating:
          type: number
          format: float
        genres:
          type: array
          items:
            type: string            
    problemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true