/*
 * readingList
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"errors"
	"github.com/tsmoreland/go-web/readingList/internal/data"
	"log"
	"net/http"
	"os"
	"strconv"
)

type Api struct {
	logger     *log.Logger
	repository data.Repository
}

func NewApi(repository data.Repository) *Api {
	api := &Api{
		logger:     log.New(os.Stdout, "", log.Ldate|log.Ltime),
		repository: repository,
	}
	return api
}

func (api *Api) AddBook(w http.ResponseWriter, r *http.Request) {
	var dto AddOrUpdateBook
	if err := api.readJSONObject(w, r, &dto); err != nil {
		api.writeProblemDetails(w, r, "bad request", http.StatusBadRequest, err.Error())
		return
	}

	book, err := api.repository.
		InsertOne(dto.Title, int(dto.Published), int(dto.Pages), float64(dto.Rating), dto.Genres)
	if err != nil {
		api.writeProblemDetails(w, r, "server error", http.StatusInternalServerError, err.Error())
		return
	}

	if err := api.writeJSON(w, http.StatusCreated, NewBookEnvelopeFromEntity(book)); err != nil {
		api.writeProblemDetails(w, r, "server error", http.StatusInternalServerError, err.Error())
	}
}

func (api *Api) DeleteBook(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func (api *Api) GetAllBooks(w http.ResponseWriter, r *http.Request) {
	books, err := api.repository.FindAll(true)
	if err != nil {
		api.writeProblemDetails(w, r, "server error", http.StatusInternalServerError, err.Error())
		return
	}

	if err = api.writeJSON(w, http.StatusOK, NewBooksEnvelope(books)); err != nil {
		api.writeProblemDetails(w, r, "server error", http.StatusInternalServerError, err.Error())
		return
	}
}

func (api *Api) GetBook(w http.ResponseWriter, r *http.Request) {
	id, err := strconv.ParseInt(r.URL.Path[len("api/v2/books/"):], 10, 64)
	if err != nil {
		api.writeProblemDetails(w, r, "Bad Request", http.StatusBadRequest, err.Error())
		return
	}

	book, err := api.repository.FindById(id, true)
	if err != nil {
		switch {
		case errors.Is(err, data.NotFoundError):
			api.writeProblemDetails(w, r, "Not Found", http.StatusNotFound, "matching book not found")
			return
		default:
			api.writeProblemDetails(w, r, "server error", http.StatusInternalServerError, err.Error())
			return
		}
	}

	bookDto := NewBookEnvelopeFromEntity(book)
	if err = api.writeJSON(w, http.StatusOK, bookDto); err != nil {
		api.writeProblemDetails(w, r, "server error", http.StatusInternalServerError, err.Error())
		return
	}
}

func (api *Api) UpdateBook(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
