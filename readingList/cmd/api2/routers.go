/*
 * readingList
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"github.com/gorilla/mux"
	"net/http"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter(api *Api) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func (api *Api) Index(w http.ResponseWriter, r *http.Request) {
	problem := ProblemDetails{
		Type_:    "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.4",
		Title:    "Not Found",
		Status:   404,
		Detail:   "Page or Endpoint not found",
		Instance: "/",
	}
	if err := api.writeJSON(w, 404, problem); err != nil {
		http.Error(w, "", 404)
		return
	}
}

func getRoutes(api *Api) Routes {
	return Routes{
		Route{
			"Index",
			"GET",
			"/api/v2/",
			api.Index,
		},
		Route{
			"AddBook",
			http.MethodPost,
			"/api/v2/books",
			api.AddBook,
		},

		Route{
			"DeleteBook",
			http.MethodDelete,
			"/api/v2/books/{id}",
			api.DeleteBook,
		},

		Route{
			"GetAllBooks",
			http.MethodGet,
			"/api/v2/books",
			api.GetAllBooks,
		},

		Route{
			"GetBook",
			http.MethodGet,
			"/api/v2/books/{id}",
			api.GetBook,
		},

		Route{
			"UpdateBook",
			http.MethodPut,
			"/api/v2/books/{id}",
			api.UpdateBook,
		},
	}
}

var routes = Routes{}
